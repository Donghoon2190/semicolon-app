{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\FinalProject\\\\semicolon-app\\\\screens\\\\tabs\\\\Profile.js\";\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteralLoose([\"\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteralLoose([\"\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  {\\n    me {\\n      ...UserParts\\n    }\\n  }\\n  \", \"\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useEffect, useState } from \"react\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { gql } from \"apollo-boost\";\nimport { USER_FRAGMENT } from \"../../Fragments\";\nimport Loader from \"../../components/Loader\";\nimport { useQuery } from \"react-apollo-hooks\";\nimport styled from \"styled-components/native\";\nimport UserProfile from \"../../components/UserProfile\";\nexport var ME = gql(_templateObject(), USER_FRAGMENT);\nvar View = styled.View(_templateObject2());\nvar Text = styled.Text(_templateObject3());\nexport default (function (_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      refreshing = _useState2[0],\n      setRefreshing = _useState2[1];\n\n  var refresh = function refresh() {\n    return _regeneratorRuntime.async(function refresh$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            setRefreshing(true);\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(refetch());\n\n          case 4:\n            _context.next = 9;\n            break;\n\n          case 6:\n            _context.prev = 6;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 9:\n            _context.prev = 9;\n            setRefreshing(false);\n            return _context.finish(9);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 6, 9, 12]], Promise);\n  };\n\n  var _useQuery = useQuery(ME),\n      loading = _useQuery.loading,\n      data = _useQuery.data;\n\n  console.log(loading, data);\n  return React.createElement(ScrollView, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, loading ? React.createElement(Loader, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 18\n    }\n  }) : data && data.me && React.createElement(UserProfile, _extends({}, data.me, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 50\n    }\n  })));\n});","map":{"version":3,"sources":["D:/FinalProject/semicolon-app/screens/tabs/Profile.js"],"names":["React","useEffect","useState","gql","USER_FRAGMENT","Loader","useQuery","styled","UserProfile","ME","View","Text","navigation","refreshing","setRefreshing","refresh","refetch","console","log","loading","data","me"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;AAEA,SAASC,GAAT,QAAoB,cAApB;AACA,SAASC,aAAT;AACA,OAAOC,MAAP;AACA,SAASC,QAAT,QAAyB,oBAAzB;AAEA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,WAAP;AAEA,OAAO,IAAMC,EAAE,GAAGN,GAAH,oBAMXC,aANW,CAAR;AASP,IAAMM,IAAI,GAAGH,MAAM,CAACG,IAAV,oBAAV;AACA,IAAMC,IAAI,GAAGJ,MAAM,CAACI,IAAV,oBAAV;AAEA,gBAAe,gBAAoB;AAAA,MAAjBC,UAAiB,QAAjBA,UAAiB;;AAAA,kBACGV,QAAQ,CAAC,KAAD,CADX;AAAA;AAAA,MAC1BW,UAD0B;AAAA,MACdC,aADc;;AAEjC,MAAMC,OAAO,GAAG,SAAVA,OAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAEZD,YAAAA,aAAa,CAAC,IAAD,CAAb;AAFY;AAAA,6CAGNE,OAAO,EAHD;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAKZC,YAAAA,OAAO,CAACC,GAAR;;AALY;AAAA;AAOZJ,YAAAA,aAAa,CAAC,KAAD,CAAb;AAPY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhB;;AAFiC,kBAaPR,QAAQ,CAACG,EAAD,CAbD;AAAA,MAazBU,OAbyB,aAazBA,OAbyB;AAAA,MAahBC,IAbgB,aAahBA,IAbgB;;AAcjCH,EAAAA,OAAO,CAACC,GAAR,CAAYC,OAAZ,EAAqBC,IAArB;AACA,SACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,OAAO,GAAG,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GAAgBC,IAAI,IAAIA,IAAI,CAACC,EAAb,IAAmB,oBAAC,WAAD,eAAiBD,IAAI,CAACC,EAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAD7C,CADF;AAKD,CApBD","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { ScrollView } from \"react-native\";\r\nimport { gql } from \"apollo-boost\";\r\nimport { USER_FRAGMENT } from \"../../Fragments\";\r\nimport Loader from \"../../components/Loader\";\r\nimport { useQuery } from \"react-apollo-hooks\";\r\n//import UserProfile from \"../../components/UserProfile\";\r\nimport styled from \"styled-components/native\";\r\nimport UserProfile from \"../../components/UserProfile\";\r\n\r\nexport const ME = gql`\r\n  {\r\n    me {\r\n      ...UserParts\r\n    }\r\n  }\r\n  ${USER_FRAGMENT}\r\n`;\r\n\r\nconst View = styled.View``;\r\nconst Text = styled.Text``;\r\n\r\nexport default ({ navigation }) => {\r\n  const [refreshing, setRefreshing] = useState(false);\r\n  const refresh = async () => {\r\n    try {\r\n      setRefreshing(true);\r\n      await refetch();\r\n    } catch (e) {\r\n      console.log(e);\r\n    } finally {\r\n      setRefreshing(false);\r\n    }\r\n  };\r\n  // refreshControl = {< RefreshControl refreshing = { refreshing } onRefresh = { refresh } />}\r\n  const { loading, data } = useQuery(ME);\r\n  console.log(loading, data);\r\n  return (\r\n    <ScrollView>\r\n      {loading ? <Loader /> : data && data.me && <UserProfile {...data.me} />}\r\n    </ScrollView>\r\n  );\r\n};"]},"metadata":{},"sourceType":"module"}