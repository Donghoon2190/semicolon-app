{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\FinalProject\\\\semicolon-app\\\\screens\\\\tabs\\\\Home.js\";\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  {\\n    seeFeed {\\n      id\\n      location\\n      caption\\n      user {\\n        id\\n        avatar\\n        username\\n      }\\n      files {\\n        id\\n        url\\n      }\\n      likeCount\\n      isLiked\\n      comments {\\n        id\\n        text\\n        user {\\n          id\\n          username\\n        }\\n      }\\n      createdAt\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  justify-content: center;\\n  align-items: center;\\n  flex: 1;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from \"react\";\nimport styled from 'styled-components/native';\nimport Loader from \"../../components/Loader\";\nimport { gql } from \"apollo-boost\";\nimport { useQuery } from \"react-apollo-hooks\";\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nvar View = styled.View(_templateObject());\nvar FEED_QUERY = gql(_templateObject2());\nexport default (function () {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      refreshing = _useState2[0],\n      setRefreshing = _useState2[1];\n\n  var _useQuery = useQuery(FEED_QUERY),\n      loading = _useQuery.loading,\n      data = _useQuery.data,\n      refetch = _useQuery.refetch;\n\n  var refresh = function refresh() {\n    return _regeneratorRuntime.async(function refresh$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            setRefreshing(true);\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(refetch());\n\n          case 4:\n            _context.next = 9;\n            break;\n\n          case 6:\n            _context.prev = 6;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 9:\n            _context.prev = 9;\n            setRefreshing(false);\n            return _context.finish(9);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 6, 9, 12]], Promise);\n  };\n\n  return React.createElement(ScrollView, {\n    refreshControl: React.createElement(RefreshControl, {\n      refreshing: refreshing,\n      onRefresh: refresh,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, loading ? React.createElement(Loader, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 18\n    }\n  }) : React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 31\n    }\n  }, \"Hello\"));\n});","map":{"version":3,"sources":["D:/FinalProject/semicolon-app/screens/tabs/Home.js"],"names":["React","useState","styled","Loader","gql","useQuery","View","FEED_QUERY","refreshing","setRefreshing","loading","data","refetch","refresh","console","log"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,MAAP;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,SAASC,QAAT,QAAyB,oBAAzB;;;AAGA,IAAMC,IAAI,GAAGJ,MAAM,CAACI,IAAV,mBAAV;AAMA,IAAMC,UAAU,GAAGH,GAAH,oBAAhB;AA8BA,gBAAe,YAAM;AAAA,kBACiBH,QAAQ,CAAC,KAAD,CADzB;AAAA;AAAA,MACZO,UADY;AAAA,MACAC,aADA;;AAAA,kBAEgBJ,QAAQ,CAACE,UAAD,CAFxB;AAAA,MAEXG,OAFW,aAEXA,OAFW;AAAA,MAEFC,IAFE,aAEFA,IAFE;AAAA,MAEIC,OAFJ,aAEIA,OAFJ;;AAGnB,MAAMC,OAAO,GAAG,SAAVA,OAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAEZJ,YAAAA,aAAa,CAAC,IAAD,CAAb;AAFY;AAAA,6CAGNG,OAAO,EAHD;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAKZE,YAAAA,OAAO,CAACC,GAAR;;AALY;AAAA;AAOZN,YAAAA,aAAa,CAAC,KAAD,CAAb;AAPY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhB;;AAUA,SACE,oBAAC,UAAD;AACE,IAAA,cAAc,EACZ,oBAAC,cAAD;AAAgB,MAAA,UAAU,EAAED,UAA5B;AAAwC,MAAA,SAAS,EAAEK,OAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGH,OAAO,GAAG,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GAAgB,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAL1B,CADF;AASD,CAtBD","sourcesContent":["import React, { useState } from \"react\";\r\nimport styled from 'styled-components/native';\r\nimport Loader from \"../../components/Loader\";\r\nimport { gql } from \"apollo-boost\";\r\nimport { useQuery } from \"react-apollo-hooks\";\r\nimport { RefreshControl, ScrollView } from \"react-native\";\r\n\r\nconst View = styled.View`\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex: 1;\r\n`;\r\n\r\nconst FEED_QUERY = gql`\r\n  {\r\n    seeFeed {\r\n      id\r\n      location\r\n      caption\r\n      user {\r\n        id\r\n        avatar\r\n        username\r\n      }\r\n      files {\r\n        id\r\n        url\r\n      }\r\n      likeCount\r\n      isLiked\r\n      comments {\r\n        id\r\n        text\r\n        user {\r\n          id\r\n          username\r\n        }\r\n      }\r\n      createdAt\r\n    }\r\n  }\r\n`;\r\n\r\nexport default () => {\r\n  const [refreshing, setRefreshing] = useState(false);\r\n  const { loading, data, refetch } = useQuery(FEED_QUERY);\r\n  const refresh = async () => {\r\n    try {\r\n      setRefreshing(true);\r\n      await refetch();\r\n    } catch (e) {\r\n      console.log(e);\r\n    } finally {\r\n      setRefreshing(false);\r\n    }\r\n  };\r\n  return (\r\n    <ScrollView\r\n      refreshControl={\r\n        <RefreshControl refreshing={refreshing} onRefresh={refresh} />\r\n      }\r\n    >\r\n      {loading ? <Loader /> : <Text>Hello</Text>}\r\n    </ScrollView>\r\n  );\r\n};"]},"metadata":{},"sourceType":"module"}