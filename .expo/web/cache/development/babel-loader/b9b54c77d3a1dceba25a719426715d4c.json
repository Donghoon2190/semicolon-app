{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\FinalProject\\\\semicolon-app\\\\screens\\\\auth\\\\Login.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  justify-content: center;\\n  align-items: center;\\n  flex: 1;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from \"react\";\nimport styled from \"styled-components/native\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport AuthButton from \"../../components/AuthButton\";\nimport AuthInput from \"../../components/AuthInput\";\nimport useInput from \"../../hooks/useInput\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { useMutation } from \"react-apollo-hooks\";\nimport LOG_IN from \"./AuthQueries\";\nvar View = styled.View(_templateObject());\nexport default (function (_ref) {\n  var navigation = _ref.navigation;\n  var emailInput = useInput(\"\");\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoadding = _useState2[1];\n\n  var _useMutation = useMutation(LOG_IN, {\n    variables: {\n      emile: emailInput.value\n    }\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      requestSecret = _useMutation2[0];\n\n  var handleLogin = function handleLogin() {\n    var value, emailRegex;\n    return _regeneratorRuntime.async(function handleLogin$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            value = emailInput.value;\n            emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n            if (!(value === \"\")) {\n              _context.next = 6;\n              break;\n            }\n\n            return _context.abrupt(\"return\", Alert.alert(\"Email can't be empty\"));\n\n          case 6:\n            if (!(!value.includes(\"@\") || !value.includes(\".\"))) {\n              _context.next = 10;\n              break;\n            }\n\n            return _context.abrupt(\"return\", Alert.alert(\"Please write an email\"));\n\n          case 10:\n            if (emailRegex.test(value)) {\n              _context.next = 12;\n              break;\n            }\n\n            return _context.abrupt(\"return\", Alert.alert(\"That email is invalid\"));\n\n          case 12:\n            _context.prev = 12;\n            setLoadding(true);\n            _context.next = 16;\n            return _regeneratorRuntime.awrap(requestSecret());\n\n          case 16:\n            Alert.alert('Check your email');\n            navigation.navigate(\"Confirm\");\n            _context.next = 23;\n            break;\n\n          case 20:\n            _context.prev = 20;\n            _context.t0 = _context[\"catch\"](12);\n            Alert.alert(\"Can't log in now\");\n\n          case 23:\n            _context.prev = 23;\n            setLoadding(false);\n            return _context.finish(23);\n\n          case 26:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[12, 20, 23, 26]], Promise);\n  };\n\n  return React.createElement(TouchableWithoutFeedback, {\n    onPress: Keyboard.dismiss,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, React.createElement(AuthInput, _extends({}, emailInput, {\n    placeholder: \"Email\",\n    keyboardType: \"email-address\",\n    returnKeyType: \"send\",\n    onEndEditing: handleLogin,\n    autoCorrect: false,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  })), React.createElement(AuthButton, {\n    loading: loading,\n    onPress: handleLogin,\n    text: \"Log In\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  })));\n});","map":{"version":3,"sources":["D:/FinalProject/semicolon-app/screens/auth/Login.js"],"names":["React","useState","styled","AuthButton","AuthInput","useInput","useMutation","LOG_IN","View","navigation","emailInput","loading","setLoadding","variables","emile","value","requestSecret","handleLogin","emailRegex","Alert","alert","includes","test","navigate","Keyboard","dismiss"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,0BAAnB;;;AAEA,OAAOC,UAAP;AACA,OAAOC,SAAP;AACA,OAAOC,QAAP;;AAEA,SAASC,WAAT,QAA4B,oBAA5B;AACA,OAAOC,MAAP;AACA,IAAMC,IAAI,GAAGN,MAAM,CAACM,IAAV,mBAAV;AAMA,gBAAe,gBAAoB;AAAA,MAAjBC,UAAiB,QAAjBA,UAAiB;AACjC,MAAMC,UAAU,GAAGL,QAAQ,CAAC,EAAD,CAA3B;;AADiC,kBAEFJ,QAAQ,CAAC,KAAD,CAFN;AAAA;AAAA,MAE1BU,OAF0B;AAAA,MAEjBC,WAFiB;;AAAA,qBAGTN,WAAW,CAACC,MAAD,EAAS;AAAEM,IAAAA,SAAS,EAAE;AAAEC,MAAAA,KAAK,EAAEJ,UAAU,CAACK;AAApB;AAAb,GAAT,CAHF;AAAA;AAAA,MAG1BC,aAH0B;;AAIjC,MAAMC,WAAW,GAAG,SAAdA,WAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AACVF,YAAAA,KADU,GACAL,UADA,CACVK,KADU;AAEZG,YAAAA,UAFY,GAEC,wJAFD;;AAAA,kBAGdH,KAAK,KAAK,EAHI;AAAA;AAAA;AAAA;;AAAA,6CAITI,KAAK,CAACC,KAAN,CAAY,sBAAZ,CAJS;;AAAA;AAAA,kBAKP,CAACL,KAAK,CAACM,QAAN,CAAe,GAAf,CAAD,IAAwB,CAACN,KAAK,CAACM,QAAN,CAAe,GAAf,CALlB;AAAA;AAAA;AAAA;;AAAA,6CAMTF,KAAK,CAACC,KAAN,CAAY,uBAAZ,CANS;;AAAA;AAAA,gBAONF,UAAU,CAACI,IAAX,CAAgBP,KAAhB,CAPM;AAAA;AAAA;AAAA;;AAAA,6CAQTI,KAAK,CAACC,KAAN,CAAY,uBAAZ,CARS;;AAAA;AAAA;AAUhBR,YAAAA,WAAW,CAAC,IAAD,CAAX;AAVgB;AAAA,6CAWVI,aAAa,EAXH;;AAAA;AAYhBG,YAAAA,KAAK,CAACC,KAAN,CAAY,kBAAZ;AACAX,YAAAA,UAAU,CAACc,QAAX,CAAoB,SAApB;AAbgB;AAAA;;AAAA;AAAA;AAAA;AAehBJ,YAAAA,KAAK,CAACC,KAAN,CAAY,kBAAZ;;AAfgB;AAAA;AAiBhBR,YAAAA,WAAW,CAAC,KAAD,CAAX;AAjBgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApB;;AAoBA,SACE,oBAAC,wBAAD;AAA0B,IAAA,OAAO,EAAEY,QAAQ,CAACC,OAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,SAAD,eACMf,UADN;AAEE,IAAA,WAAW,EAAC,OAFd;AAGE,IAAA,YAAY,EAAC,eAHf;AAIE,IAAA,aAAa,EAAC,MAJhB;AAKE,IAAA,YAAY,EAAEO,WALhB;AAME,IAAA,WAAW,EAAE,KANf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,EASE,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAEN,OAArB;AAA8B,IAAA,OAAO,EAAEM,WAAvC;AAAoD,IAAA,IAAI,EAAC,QAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,CADF,CADF;AAeD,CAvCD","sourcesContent":["import React, { useState } from \"react\";\r\nimport styled from \"styled-components/native\";\r\nimport { TouchableWithoutFeedback, Keyboard } from \"react-native\";\r\nimport AuthButton from \"../../components/AuthButton\";\r\nimport AuthInput from \"../../components/AuthInput\";\r\nimport useInput from \"../../hooks/useInput\";\r\nimport { Alert } from \"react-native\";\r\nimport { useMutation } from \"react-apollo-hooks\";\r\nimport LOG_IN from \"./AuthQueries\";\r\nconst View = styled.View`\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex: 1;\r\n`;\r\n\r\nexport default ({ navigation }) => {\r\n  const emailInput = useInput(\"\");\r\n  const [loading, setLoadding] = useState(false);\r\n  const [requestSecret] = useMutation(LOG_IN, { variables: { emile: emailInput.value } });\r\n  const handleLogin = async () => {\r\n    const { value } = emailInput;\r\n    const emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    if (value === \"\") {\r\n      return Alert.alert(\"Email can't be empty\");\r\n    } else if (!value.includes(\"@\") || !value.includes(\".\")) {\r\n      return Alert.alert(\"Please write an email\");\r\n    } else if (!emailRegex.test(value)) {\r\n      return Alert.alert(\"That email is invalid\");\r\n    } try {\r\n      setLoadding(true)\r\n      await requestSecret();\r\n      Alert.alert('Check your email')\r\n      navigation.navigate(\"Confirm\")\r\n    } catch (e) {\r\n      Alert.alert(\"Can't log in now\")\r\n    } finally {\r\n      setLoadding(false);\r\n    }\r\n  };\r\n  return (\r\n    <TouchableWithoutFeedback onPress={Keyboard.dismiss}>\r\n      <View>\r\n        <AuthInput\r\n          {...emailInput}\r\n          placeholder=\"Email\"\r\n          keyboardType=\"email-address\"\r\n          returnKeyType=\"send\"\r\n          onEndEditing={handleLogin}\r\n          autoCorrect={false}\r\n        />\r\n        <AuthButton loading={loading} onPress={handleLogin} text=\"Log In\" />\r\n      </View>\r\n    </TouchableWithoutFeedback>\r\n  );\r\n};"]},"metadata":{},"sourceType":"module"}